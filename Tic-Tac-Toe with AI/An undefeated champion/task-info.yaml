type: edu
custom_name: stage5
files:
- name: test/Grid.java
  visible: false
  text: |-
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.stream.Collectors;
    import java.util.stream.Stream;

    public class Grid {

        private final CellState[][] grid;

        private Grid() {
            grid = new CellState[3][3];
        }

        public static Grid fromLine(String line) {
            Grid grid = new Grid();

            if (line.length() != 9) {
                throw new WrongAnswer("Wrong input length. Expected 9.\nFound " + line.length());
            }

            for (int i = 0; i < line.length(); i++) {
                grid.grid[i / 3][i % 3] = CellState.get(line.charAt(i));
            }

            return grid;
        }

        public static Grid fromOutput(String stringField) {
            return fromOutput(stringField, 1);
        }

        public static Grid fromOutput(String stringField, int fieldNumber) {

            Grid grid = new Grid();

            List<String> fieldLines = Arrays.stream(stringField.split("\n"))
                .map(String::strip)
                .filter(line -> line.startsWith("|") && line.endsWith("|"))
                .collect(Collectors.toList());

            if (fieldLines.size() < 3 * fieldNumber) {
                throw new WrongAnswer("Expected not less than " + fieldNumber + " grids in the output!\n" +
                    "Make sure you print the game grids in the correct format!");
            }

            fieldLines = fieldLines.subList(fieldNumber * 3 - 3, fieldNumber * 3);

            for (int i = 0; i < fieldLines.size(); i++) {
                String line = fieldLines.get(i);
                if (line.length() != 9) {
                    throw new WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line);
                }
                for (int j = 0; j < 3; j++) {
                    grid.grid[i][j] = CellState.get(line.charAt(j * 2 + 2));
                }
            }

            return grid;
        }

        public static List<Grid> allGridsFromOutput(String stringField) {

            List<Grid> gridList = new ArrayList<>();

            List<String> fieldLines = Arrays.stream(stringField.split("\n"))
                .map(String::strip)
                .filter(line -> line.startsWith("|") && line.endsWith("|"))
                .collect(Collectors.toList());

            if (fieldLines.size() % 3 != 0) {
                throw new WrongAnswer("Wrong grid output format! Each grid should contain 3 lines that starts and ends with '|' symbol!");
            }

            for (int i = 0; i < fieldLines.size() / 3; i++) {
                List<String> gridLines = fieldLines.subList(i * 3, i * 3 + 3);

                Grid grid = new Grid();

                for (int j = 0; j < gridLines.size(); j++) {
                    String line = gridLines.get(j);
                    if (line.length() != 9) {
                        throw new WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line);
                    }
                    for (int k = 0; k < 3; k++) {
                        grid.grid[j][k] = CellState.get(line.charAt(k * 2 + 2));
                    }
                }

                gridList.add(grid);
            }

            return gridList;
        }

        public static Position getMove(Grid from, Grid to) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (from.grid[i][j] != to.grid[i][j]) {
                        return new Position(i, j);
                    }
                }
            }
            throw new WrongAnswer("After making a move the grid was the same!");
        }

        public boolean isWin(CellState player) {
            for (int i = 0; i < 3; i++) {
                if (grid[i][0] == grid[i][1] && grid[i][1] == grid[i][2] && grid[i][2] == player) {
                    return true;
                }
            }

            for (int i = 0; i < 3; i++) {
                if (grid[0][i] == grid[1][i] && grid[1][i] == grid[2][i] && grid[2][i] == player) {
                    return true;
                }
            }

            return grid[0][0] == grid[1][1] && grid[1][1] == grid[2][2] && grid[2][2] == player
                || grid[2][0] == grid[1][1] && grid[1][1] == grid[0][2] && grid[0][2] == player;
        }

        public boolean hasEmptyCells() {
            return Arrays.stream(grid)
                .flatMap(Stream::of)
                .anyMatch(cell -> cell == CellState.EMPTY);
        }

        public int getNumOfEmptyCells() {
            return (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.EMPTY).count();
        }

        public GameState getGameState() {
            if (isWin(CellState.X)) return GameState.X_WIN;
            if (isWin(CellState.O)) return GameState.O_WIN;
            if (hasEmptyCells()) return GameState.NOT_FINISHED;
            else return GameState.DRAW;
        }

        public CellState[][] getGrid() {
            return grid;
        }

        public void setCell(int x, int y, CellState cellState) {
            grid[x][y] = cellState;
        }

        public boolean isCorrectNextGrid(Grid grid) {
            return getNumOfEmptyCells() - grid.getNumOfEmptyCells() == 1;
        }

        public boolean isValidGrid() {

            int numOfX = (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.X).count();
            int numOfO = (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.O).count();

            return Math.abs(numOfO - numOfX) <= 1;
        }

        public static void checkGridSequence(List<Grid> grids) {
            if (grids.size() <= 1) {
                return;
            }

            for (int i = 1; i < grids.size(); i++) {
                Grid prevGrid = grids.get(i - 1);
                Grid grid = grids.get(i);
                if (!grid.isValidGrid()) {
                    throw new WrongAnswer("Impossible grid was printed! The difference between Os and Xs in the grid is greater than 1:\n" + grid);
                }
                if (!prevGrid.isCorrectNextGrid(grid)) {
                    throw new WrongAnswer("After making a move on grid\n" + prevGrid + "\n it can't become\n" + grid);
                }
            }

            Grid lastGrid = grids.get(grids.size() - 1);

            if (lastGrid.getGameState() == GameState.NOT_FINISHED) {
                throw new WrongAnswer("Last grid is not terminal!\n" + lastGrid);
            }
        }

        @Override
        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("---------").append("\n");
            for (int i = 0; i < 3; i++) {
                stringBuilder.append("| ").append(grid[i][0]).append(" ").append(grid[i][1]).append(" ").append(grid[i][2]).append(" |\n");
            }
            stringBuilder.append("---------");
            return stringBuilder.toString();
        }

        private String toLine() {
            StringBuilder result = new StringBuilder();
            for (int i = 0; i < 9; i++) {
                result.append(grid[i / 3][i % 3]);
            }
            return result.toString();
        }

        @Override
        public boolean equals(Object o) {
            if (!(o instanceof Grid)) {
                return false;
            }

            Grid grid = (Grid) o;

            for (int i = 0; i < 9; i++) {
                if (grid.grid[i / 3][i % 3] != this.grid[i / 3][i % 3]) {
                    return false;
                }
            }
            return true;
        }

        public Grid copy() {
            return Grid.fromLine(toLine());
        }
    }

    enum GameState {

        X_WIN, O_WIN, DRAW, NOT_FINISHED

    }

    enum CellState {

        X("X"), O("O"), EMPTY(" ");

        String value;

        CellState(String value) {
            this.value = value;
        }

        static CellState get(char symbol) {
            switch (symbol) {
                case 'X':
                    return X;
                case 'O':
                    return O;
                case ' ':
                case '_':
                    return EMPTY;
                default:
                    throw new WrongAnswer("Bad symbol '" + symbol + "' in the game grid");
            }
        }

        static CellState getOpponent(CellState player) {
            if (player == X) {
                return O;
            } else {
                return X;
            }
        }

        @Override
        public String toString() {
            return value;
        }
    }
  learner_created: false
- name: test/Minimax.java
  visible: false
  text: |+
    import java.util.ArrayList;
    import java.util.List;

    public class Minimax {

        private static Position bestPosition;

        public static Position getMove(Grid grid, CellState player) {

            int bestScore = Integer.MIN_VALUE;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), false, player, 1);
                        grid.setCell(i, j, CellState.EMPTY);
                        if (score > bestScore) {
                            bestScore = score;
                            bestPosition = new Position(i, j);
                        }
                    }
                }
            }

            return bestPosition;
        }

        private static int minimax(Grid grid, CellState player, boolean isMaximize, CellState startPlayer, int depth) {

            switch (grid.getGameState()) {
                case X_WIN:
                    return startPlayer == CellState.X ? 10 - depth : depth - 10;
                case O_WIN:
                    return startPlayer == CellState.O ? 10 - depth : depth - 10;
                case DRAW:
                    return 0;
            }

            int bestScore = isMaximize ? Integer.MIN_VALUE : Integer.MAX_VALUE;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), !isMaximize, startPlayer, depth + 1);
                        grid.setCell(i, j, CellState.EMPTY);
                        bestScore = isMaximize ? Math.max(bestScore, score) : Math.min(bestScore, score);
                    }
                }
            }

            return bestScore;
        }

        public static List<Position> getAvailablePositions(Grid grid, CellState player) {

            List<Position> positions = new ArrayList<>();

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), false, player, 1);
                        if (score >= 0) {
                            positions.add(new Position(i, j));
                        }
                        grid.setCell(i, j, CellState.EMPTY);
                    }
                }
            }

            return positions;
        }
    }

    class Position {

        int x;
        int y;

        public Position(int x, int y) {
            this.x = x;
            this.y = y;
        }

        @Override
        public String toString() {
            return x + " " + y;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Position position = (Position) o;
            return x == position.x &&
                y == position.y;
        }
    }



  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 11)
        CheckResult checkHardAi() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start user hard");
            Grid grid = Grid.fromOutput(output);
            Position nextMove = Minimax.getMove(grid, CellState.X);
            output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

            while (!output.toLowerCase().contains("win") && !output.toLowerCase().contains("draw")) {
                Grid gridAfterUserMove = Grid.fromOutput(output);
                Grid gridAfterAiMove = Grid.fromOutput(output, 2);
                Position aiMove = Grid.getMove(gridAfterUserMove, gridAfterAiMove);

                List<Position> correctMinimaxMovePositions = Minimax.getAvailablePositions(gridAfterUserMove, CellState.O);
                if (!correctMinimaxMovePositions.contains(aiMove)) {
                    return CheckResult.wrong("Your minimax algorithm is wrong! It chooses wrong positions to make a move!");
                }

                nextMove = Minimax.getMove(gridAfterAiMove, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 5, order = 12)
        CheckResult checkHardVsHard() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start hard hard");

            if (!output.toLowerCase().contains("draw")) {
                return CheckResult.wrong("The result of the game between minimax algorithms should be always 'Draw'!\n" +
                    "Make sure your output contains 'Draw'.");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/mainclasses/Board.java
  visible: true
  text: "package tictactoe.mainclasses;\n\n\npublic class Board{\n    \n    private\
    \ final int BOARD_ROW = 3;\n    private final int BOARD_COLUMN = 3;\n    private\
    \ final char[][] board;\n\n    public Board(){\n        this.board = new char[BOARD_ROW][BOARD_COLUMN];\n\
    \        for(int i = 0; i < BOARD_ROW; i++)\n            for(int j = 0; j < BOARD_COLUMN;\
    \ j++)\n                this.board[i][j] = ' ';\n    }\n\n    public char[][]\
    \ getBoard() {\n        return board;\n    }\n\n    public int getBOARD_ROW()\
    \ {\n        return BOARD_ROW;\n    }\n\n    public int getBOARD_COLUMN() {\n\
    \        return BOARD_COLUMN;\n    }\n    \n}\n"
  learner_created: true
- name: src/tictactoe/mainclasses/Main.java
  visible: true
  text: "package tictactoe.mainclasses;\n\npublic class Main {\n    \n    public static\
    \ void main(String[] args) {\n\n        Game game = new Game();\n        game.start();\
    \        \n      \n    }\n    \n\n}\n"
  learner_created: true
- name: src/tictactoe/helpers/PlayerInput.java
  visible: true
  text: "package tictactoe.helpers;\n\nimport tictactoe.interfaces_.UserInput;\nimport\
    \ tictactoe.validation.classes.Checker;\nimport tictactoe.validation.interfaces_.PlayerChecker;\n\
    \nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\
    \npublic class PlayerInput implements UserInput {\n    \n    Checker checker;\n\
    \    public PlayerInput(Checker checker){\n        this.checker = checker;\n \
    \   }\n    \n    @Override\n    public char[] getUserInput() {\n\n        Scanner\
    \ in = new Scanner(System.in);\n\n        System.out.print(\"Input command: \"\
    );\n\n        String choice = in.nextLine();\n        \n        if(!checker.players.check(choice))\
    \ {\n            System.out.println(\"Bad parameters!\");\n            return\
    \ getUserInput();\n        }\n        \n        return splitChoice(choice);\n\
    \        \n    }\n    \n    private char[] splitChoice(String choice){\n\n   \
    \     Map<String, Character> map = new HashMap<>();\n        \n        map.put(\"\
    exit\", '0');\n        map.put(\"start\", '1');\n        map.put(\"user\", '2');\n\
    \        map.put(\"easy\", '3');\n        map.put(\"medium\", '4');\n        \n\
    \        String[] array = choice.split(\" \");\n\n        //System.out.println(array.length);\n\
    \        \n        return array.length == 1 ? new char[]{'0', '9', '9', '9'} \n\
    \        : new char[]{map.get(array[0]), map.get(array[1]), map.get(array[2])};\n\
    \        \n    }\n    \n}\n"
  learner_created: true
- name: src/tictactoe/validation/classes/State.java
  visible: true
  text: "package tictactoe.validation.classes;\n\nimport tictactoe.mainclasses.Board;\n\
    import tictactoe.validation.interfaces_.StateChecker;\n\npublic class State {\n\
    \n    Board board;\n\n    public State(Board board) {\n        this.board = board;\n\
    \    }\n\n    public boolean checkState(char symbol, Board board) {\n\n      \
    \  return checkColumns.check(symbol, board)\n                || checkRows.check(symbol,\
    \ board)\n                || checkDiagonals.check(symbol, board);\n        \n\
    \    }\n\n    private final StateChecker checkColumns = (symbol, board) -> {\n\
    \n        for (int i = 0; i < board.getBOARD_COLUMN(); i++) {\n\n            if\
    \ (board.getBoard()[0][i] == symbol\n                    && board.getBoard()[1][i]\
    \ == symbol\n                    && board.getBoard()[2][i] == symbol)\n      \
    \          return true;\n\n        }\n\n        return false;\n\n    };\n\n  \
    \  private final StateChecker checkRows = (symbol, board1) -> {\n\n        for\
    \ (int i = 0; i < board.getBOARD_ROW(); i++) {\n\n            if (board.getBoard()[i][0]\
    \ == symbol\n                    && board.getBoard()[i][1] == symbol\n       \
    \             && board.getBoard()[i][2] == symbol)\n                return true;\n\
    \n        }\n\n        return false;\n        \n    };\n\n    private final StateChecker\
    \ checkDiagonals = (symbol, board1) -> {\n\n        if (board.getBoard()[0][0]\
    \ == symbol\n                && board.getBoard()[1][1] == symbol\n           \
    \     && board.getBoard()[2][2] == symbol)\n            return true;\n\n     \
    \   return board.getBoard()[0][2] == symbol\n                && board.getBoard()[1][1]\
    \ == symbol\n                && board.getBoard()[2][0] == symbol;        \n  \
    \      \n    };\n   \n\n}\n"
  learner_created: true
- name: src/tictactoe/validation/interfaces_/Validator.java
  visible: true
  text: "package tictactoe.validation.interfaces_;\n\npublic interface Validator {\n\
    \    \n    boolean validate(char[] values);\n\n}\n"
  learner_created: true
- name: src/tictactoe/validation/classes/Checker.java
  visible: true
  text: "package tictactoe.validation.classes;\n\nimport tictactoe.validation.interfaces_.PlayerChecker;\n\
    import tictactoe.validation.interfaces_.Validator;\n\npublic class Checker {\n\
    \n    public Validator boundary = (values) ->\n            (Integer.parseInt(String.valueOf(values[0]))\
    \ >= 1 && Integer.parseInt(String.valueOf(values[0])) <= 3)\n                \
    \    &&\n                    (Integer.parseInt(String.valueOf(values[1])) >= 1\
    \ && Integer.parseInt(String.valueOf(values[1])) <= 3);\n\n\n    public Validator\
    \ numbers = (values) ->\n            Character.isDigit(values[0]) && Character.isDigit(values[1]);\n\
    \    \n    \n    public Validator cells = (values) -> {\n        \n        if(values.length\
    \ != 9) return false;\n        for(char value : values){\n            \n     \
    \       if(value != '_' && value != 'X' && value != 'O')\n                return\
    \ false;\n        }\n        \n        return true;\n        \n    };\n   \n \
    \   public PlayerChecker players = (input) -> {\n        \n      String[] inputArray\
    \ = input.split(\" \");\n      \n      if(inputArray.length == 0 || inputArray.length\
    \ == 2)\n          return false;\n      \n      if(inputArray.length == 1 && !inputArray[0].equals(\"\
    exit\"))\n        return false;\n          \n      for(String word : inputArray)\n\
    \          if(!word.equals(\"easy\") && !word.equals(\"user\") \n            \
    \      && !word.equals(\"exit\") && !word.equals(\"start\")\n                \
    \  && !word.equals(\"medium\"))\n              return false;\n        \n     \
    \ return true;  \n      \n    };\n    \n\n}\n"
  learner_created: true
- name: src/tictactoe/interfaces_/Printer.java
  visible: true
  text: "package tictactoe.interfaces_;\n\nimport tictactoe.mainclasses.Board;\n\n\
    public interface Printer {\n    \n    void print(Board board);\n}\n"
  learner_created: true
- name: src/tictactoe/interfaces_/UserInput.java
  visible: true
  text: "package tictactoe.interfaces_;\n\npublic interface UserInput {\n    \n  \
    \  char[] getUserInput();   \n   \n}\n"
  learner_created: true
- name: src/tictactoe/validation/classes/PlayLastCellToWin.java
  visible: true
  text: "package tictactoe.validation.classes;\n\nimport tictactoe.mainclasses.Board;\n\
    \npublic class PlayLastCellToWin {\n    \n    Board board;\n    \n    public PlayLastCellToWin(Board\
    \ board){\n        this.board = board;\n    }\n \n    public boolean checkRow(char\
    \ first, char second){\n        \n        for(int i = 0; i < 3; i++){\n      \
    \      \n            if(board.getBoard()[i][0] == first && board.getBoard()[i][1]\
    \ == first){\n                if(board.getBoard()[i][2] == ' ') {\n          \
    \          board.getBoard()[i][2] = second;\n                    return true;\n\
    \                }\n            }else if(board.getBoard()[i][0] == first && board.getBoard()[i][2]\
    \ == first){\n                if(board.getBoard()[i][1] == ' ') {\n          \
    \          board.getBoard()[i][1] = second;\n                    return true;\n\
    \                }\n            }else if(board.getBoard()[i][1] == first && board.getBoard()[i][2]\
    \ == first){\n                if(board.getBoard()[i][0] == ' ') {\n          \
    \          board.getBoard()[i][0] = second;\n                    return true;\n\
    \                }\n            }\n            \n        }\n        \n       \
    \ return false;\n        \n    }\n\n    public boolean checkColumn(char first,\
    \ char second){\n\n        for(int i = 0; i < 3; i++){\n\n            if(board.getBoard()[0][i]\
    \ == first && board.getBoard()[1][i] == first){\n                if(board.getBoard()[2][i]\
    \ == ' ') {\n                    board.getBoard()[2][i] = second;\n          \
    \          return true;\n                }\n            }else if(board.getBoard()[0][i]\
    \ == first && board.getBoard()[2][i] == first){\n                if(board.getBoard()[1][i]\
    \ == ' ') {\n                    board.getBoard()[1][i] = second;\n          \
    \          return true;\n                }\n            }else if(board.getBoard()[1][i]\
    \ == first && board.getBoard()[2][i] == first){\n                if(board.getBoard()[0][i]\
    \ == ' ') {\n                    board.getBoard()[0][i] = second;\n          \
    \          return true;\n                }\n            }\n\n        }\n\n   \
    \     return false;\n        \n    }\n\n    public boolean checkDiagonal(char\
    \ first, char second){\n\n       if(board.getBoard()[0][0] == first && board.getBoard()[1][1]\
    \ == first){\n           if(board.getBoard()[2][2] == ' ') {\n               board.getBoard()[2][2]\
    \ = second;\n               return true;\n           }\n       }else if(board.getBoard()[0][0]\
    \ == first && board.getBoard()[2][2] == first){\n           if(board.getBoard()[1][1]\
    \ == ' ') {\n               board.getBoard()[1][1] = second;\n               return\
    \ true;\n           }\n       }else if(board.getBoard()[1][1] == first && board.getBoard()[2][2]\
    \ == first){\n           if(board.getBoard()[0][0] == ' ') {\n               board.getBoard()[0][0]\
    \ = second;\n               return true;\n           }\n       }\n       \n  \
    \     else if(board.getBoard()[2][0] == first && board.getBoard()[1][1] == first){\n\
    \           if(board.getBoard()[0][2] == ' ') {\n               board.getBoard()[0][2]\
    \ = second;\n               return true;\n           }\n       }else if(board.getBoard()[2][0]\
    \ == first && board.getBoard()[0][2] == first){\n           if(board.getBoard()[1][1]\
    \ == ' ') {\n               board.getBoard()[1][1] = second;\n               return\
    \ true;\n           }\n       }else if(board.getBoard()[1][1] == first && board.getBoard()[0][2]\
    \ == first){\n           if(board.getBoard()[2][0] == ' ') {\n               board.getBoard()[2][0]\
    \ = second;\n               return true;\n           }\n       }\n\n        return\
    \ false;\n\n    }\n\n    \n}\n"
  learner_created: true
- name: src/tictactoe/helpers/PrintUtil.java
  visible: true
  text: "package tictactoe.helpers;\n\nimport tictactoe.interfaces_.Printer;\nimport\
    \ tictactoe.mainclasses.Board;\n\npublic class PrintUtil implements Printer {\n\
    \n    Board board;\n    \n    public PrintUtil(Board board) {\n        this.board\
    \ = board;\n    }\n\n    @Override\n    public void print(Board board) {\n\n \
    \       System.out.println(\"---------\");\n\n        for(int i = 0; i < board.getBOARD_ROW();\
    \ i++){\n\n            System.out.print(\"| \");\n\n            for(int j = 0;\
    \ j < board.getBOARD_COLUMN(); j++){\n\n\n                System.out.print(board.getBoard()[i][j]\
    \ + \" \");\n\n            }\n\n            System.out.println(\"|\");\n\n   \
    \     }\n\n        System.out.println(\"---------\");\n\n    }\n    \n}\n"
  learner_created: true
- name: src/tictactoe/mainclasses/Player.java
  visible: true
  text: "package tictactoe.mainclasses;\n\nimport tictactoe.interfaces_.UserInput;\n\
    \npublic class Player {\n    \n    UserInput positionGetter;\n    Board board;\n\
    \    \n    public Player(UserInput positionGetter, Board board){\n        this.positionGetter\
    \ = positionGetter;\n        this.board = board;\n    }\n    \n    void play(char\
    \ symbol){\n\n       int[] position = playerMove(positionGetter, board);\n   \
    \    board.getBoard()[position[0]][position[1]] = symbol;        \n        \n\
    \    }\n\n\n    private static int[] playerMove(UserInput positionGetter, Board\
    \ board){\n\n        char[] coordinates = positionGetter.getUserInput();\n   \
    \     int row = Integer.parseInt(String.valueOf(coordinates[0])) - 1;\n      \
    \  int column = Integer.parseInt(String.valueOf(coordinates[1])) - 1;\n\n    \
    \    while(board.getBoard()[row][column] != ' '){\n\n            row = Integer.parseInt(String.valueOf(coordinates[0]))\
    \ - 1;\n            column = Integer.parseInt(String.valueOf(coordinates[1]))\
    \ - 1;\n\n        }\n\n        return new int[]{row, column};\n\n    }\n\n\n\n\
    }\n"
  learner_created: true
- name: src/tictactoe/validation/interfaces_/PlayerChecker.java
  visible: true
  text: "package tictactoe.validation.interfaces_;\n\npublic interface PlayerChecker\
    \ {\n    \n    boolean check(String input);\n    \n}\n"
  learner_created: true
- name: src/tictactoe/mainclasses/Computer.java
  visible: true
  text: "package tictactoe.mainclasses;\n\nimport tictactoe.helpers.AI;\n\nimport\
    \ java.util.Random;\n\npublic class Computer {\n    \n    AI ai;\n    \n    \n\
    \    public Computer(AI ai){\n        this.ai = ai;\n    }\n       \n    \n  \
    \  public void easy(Random random, char symbol){\n        \n        ai.execute(random,\
    \ symbol);\n        \n    }\n    \n    public void medium(Random random, char\
    \ home, char away){\n        \n        ai.execute(random, home, away);\n     \
    \   \n    }\n    \n}\n"
  learner_created: true
- name: src/tictactoe/interfaces_/Difficulty.java
  visible: true
  text: "package tictactoe.interfaces_;\n\nimport tictactoe.mainclasses.Board;\n\n\
    import java.util.Random;\n\npublic interface Difficulty {\n    \n    void execute(Random\
    \ random, char symbol);\n    \n}\n"
  learner_created: true
- name: src/tictactoe/mainclasses/Game.java
  visible: true
  text: "package tictactoe.mainclasses;\n\nimport tictactoe.helpers.AI;\nimport tictactoe.helpers.PlayerInput;\n\
    import tictactoe.helpers.PositionGetter;\nimport tictactoe.helpers.PrintUtil;\n\
    import tictactoe.interfaces_.UserInput;\nimport tictactoe.validation.classes.Checker;\n\
    import tictactoe.validation.classes.PlayLastCellToWin;\nimport tictactoe.validation.classes.State;\n\
    \nimport java.util.Random;\n\npublic class Game {\n\n    Board board = new Board();\n\
    \    State state = new State(board);  \n\n    UserInput positionGetter = new PositionGetter(new\
    \ Checker());\n\n    AI ai = new AI(new PlayLastCellToWin(board), board);\n  \
    \  Player player = new Player(positionGetter, board);\n\n    boolean isPlayerTurn\
    \ = true;\n    Random randomGenerator = new Random();    \n\n    void start()\
    \ {\n\n        int cellLimit = 0;\n        char[] choice = new PlayerInput(new\
    \ Checker()).getUserInput();\n        if (choice[0] == '0')\n            System.exit(0);\n\
    \n        int first = choice[1];\n        int second = choice[2];\n\n        if\
    \ (first == '2' && second == '2') {\n\n            while (true) {\n\n        \
    \        new PrintUtil(board).print(board);\n                \n              \
    \  if (isPlayerTurn) {\n\n                    player.play('X');\n            \
    \        isPlayerTurn = false;\n\n                } else {\n\n               \
    \     player.play('O');\n                    isPlayerTurn = true;\n\n        \
    \        }\n                cellLimit++;\n                if (isWinner(state,\
    \ board, 'X'))\n                    break;\n                if (isWinner(state,\
    \ board, 'O'))\n                    break;\n\n                if (cellLimit ==\
    \ 9) {\n                    new PrintUtil(board).print(board);\n             \
    \       System.out.println(\"Draw\");\n                    break;\n          \
    \      }\n\n            }\n            \n\n        } else if (first == '2' &&\
    \ second == '3') {\n\n\n            while (true) {\n\n                new PrintUtil(board).print(board);\n\
    \                \n                if (isPlayerTurn) {\n\n                   \
    \ player.play('X');\n                    isPlayerTurn = false;\n\n           \
    \     } else {\n\n                    ai.execute(randomGenerator, 'O');\n    \
    \                isPlayerTurn = true;\n\n                }\n\n               \
    \ cellLimit++;\n                if (isWinner(state, board, 'X'))\n           \
    \         break;\n                if (isWinner(state, board, 'O'))\n         \
    \           break;\n\n                if (cellLimit == 9) {\n                \
    \    new PrintUtil(board).print(board);\n                    System.out.println(\"\
    Draw\");\n                    break;\n                }\n\n            }\n   \
    \         \n            \n        } else if (first == '2' && second == '4') {\n\
    \n            while (true) {\n\n                new PrintUtil(board).print(board);\n\
    \                \n                if (isPlayerTurn) {\n\n                   \
    \ player.play('X');\n                    isPlayerTurn = false;\n\n           \
    \     } else {\n\n                    ai.execute(randomGenerator, 'O', 'X');\n\
    \                    isPlayerTurn = true;\n\n                }\n\n           \
    \     cellLimit++;\n                if (isWinner(state, board, 'X'))\n       \
    \             break;\n                if (isWinner(state, board, 'O'))\n     \
    \               break;\n\n                if (cellLimit == 9) {\n            \
    \        new PrintUtil(board).print(board);\n                    System.out.println(\"\
    Draw\");\n                    break;\n                }\n\n            }\n   \
    \         \n\n        } else if (first == '3' && second == '2') {\n\n        \
    \    while (true) {\n\n                new PrintUtil(board).print(board);\n  \
    \              \n                if (isPlayerTurn) {\n\n                    ai.execute(randomGenerator,\
    \ 'X');\n                    isPlayerTurn = false;\n\n                } else {\n\
    \n                    player.play('O');\n                    isPlayerTurn = true;\n\
    \n                }\n\n                cellLimit++;\n                if (isWinner(state,\
    \ board, 'X'))\n                    break;\n                if (isWinner(state,\
    \ board, 'O'))\n                    break;\n\n                if (cellLimit ==\
    \ 9) {\n                    new PrintUtil(board).print(board);\n             \
    \       System.out.println(\"Draw\");\n                    break;\n          \
    \      }\n\n            }\n            \n            \n        } else if (first\
    \ == '3' && second == '3') {\n\n            while (true) {\n\n               \
    \ new PrintUtil(board).print(board);\n                \n                if (isPlayerTurn)\
    \ {\n\n                    ai.execute(randomGenerator, 'X');\n               \
    \     isPlayerTurn = false;\n\n                } else {\n\n                  \
    \  ai.execute(randomGenerator, 'O');\n                    isPlayerTurn = true;\n\
    \n                }\n\n                cellLimit++;\n                if (isWinner(state,\
    \ board, 'X'))\n                    break;\n                if (isWinner(state,\
    \ board, 'O'))\n                    break;\n\n                if (cellLimit ==\
    \ 9) {\n                    new PrintUtil(board).print(board);\n             \
    \       System.out.println(\"Draw\");\n                    break;\n          \
    \      }\n\n            }\n\n\n        } else if (first == '3' && second == '4')\
    \ {\n\n            while (true) {\n\n                new PrintUtil(board).print(board);\n\
    \                \n                if (isPlayerTurn) {\n\n                   \
    \ ai.execute(randomGenerator, 'X');\n                    isPlayerTurn = false;\n\
    \n                } else {\n\n                    ai.execute(randomGenerator,\
    \ 'O', 'X');\n                    isPlayerTurn = true;\n\n                }\n\n\
    \                cellLimit++;\n                if (isWinner(state, board, 'X'))\n\
    \                    break;\n                if (isWinner(state, board, 'O'))\n\
    \                    break;\n\n                if (cellLimit == 9) {\n       \
    \             new PrintUtil(board).print(board);\n                    System.out.println(\"\
    Draw\");\n                    break;\n                }\n\n            }\n\n \
    \       } else if (first == '4' && second == '2') {\n\n            while (true)\
    \ {\n\n                new PrintUtil(board).print(board);\n                \n\
    \                if (isPlayerTurn) {\n\n                    ai.execute(randomGenerator,\
    \ 'X', 'O');\n                    isPlayerTurn = false;\n\n                } else\
    \ {\n\n                    player.play('O');\n                    isPlayerTurn\
    \ = true;\n\n                }\n\n                cellLimit++;\n             \
    \   if (isWinner(state, board, 'X'))\n                    break;\n           \
    \     if (isWinner(state, board, 'O'))\n                    break;\n\n       \
    \         if (cellLimit == 9) {\n                    new PrintUtil(board).print(board);\n\
    \                    System.out.println(\"Draw\");\n                    break;\n\
    \                }\n\n            }\n         \n\n        } else if (first ==\
    \ '4' && second == '3') {\n\n            while (true) {\n\n                new\
    \ PrintUtil(board).print(board);\n                \n                if (isPlayerTurn)\
    \ {\n\n                    ai.execute(randomGenerator, 'X', 'O');\n          \
    \          isPlayerTurn = false;\n\n                } else {\n\n             \
    \       ai.execute(randomGenerator, 'O');\n                    isPlayerTurn =\
    \ true;\n\n                }\n\n                cellLimit++;\n               \
    \ if (isWinner(state, board, 'X'))\n                    break;\n             \
    \   if (isWinner(state, board, 'O'))\n                    break;\n\n         \
    \       if (cellLimit == 9) {\n                    new PrintUtil(board).print(board);\n\
    \                    System.out.println(\"Draw\");\n                    break;\n\
    \                }\n\n            }\n\n\n        } else if (first == '4' && second\
    \ == '4') {\n\n            while (true) {\n\n                new PrintUtil(board).print(board);\n\
    \                \n                if (isPlayerTurn) {\n\n                   \
    \ ai.execute(randomGenerator, 'X', 'O');\n                    isPlayerTurn = false;\n\
    \n                } else {\n\n                    ai.execute(randomGenerator,\
    \ 'O', 'X');\n                    isPlayerTurn = true;\n\n                }\n\n\
    \                cellLimit++;\n                if (isWinner(state, board, 'X'))\n\
    \                    break;\n                if (isWinner(state, board, 'O'))\n\
    \                    break;\n\n                if (cellLimit == 9) {\n       \
    \             new PrintUtil(board).print(board);\n                    System.out.println(\"\
    Draw\");\n                    break;\n                }\n\n            }\n\n\n\
    \        }\n\n\n    }\n\n    private static boolean isWinner(State state, Board\
    \ board, char symbol) {\n\n        if (state.checkState(symbol, board)) {\n  \
    \          new PrintUtil(board).print(board);\n            System.out.println(symbol\
    \ + \" wins\");\n            return true;\n        }\n        return false;\n\
    \    }\n\n}\n"
  learner_created: true
- name: src/tictactoe/validation/interfaces_/StateChecker.java
  visible: true
  text: "package tictactoe.validation.interfaces_;\n\nimport tictactoe.mainclasses.Board;\n\
    \npublic interface StateChecker {\n    \n    boolean check(char symbol, Board\
    \ board);\n    \n}\n"
  learner_created: true
- name: src/tictactoe/helpers/CellGetter.java
  visible: true
  text: "package tictactoe.helpers;\n\nimport tictactoe.interfaces_.UserInput;\nimport\
    \ tictactoe.validation.classes.Checker;\n\nimport java.util.Scanner;\n\npublic\
    \ class CellGetter implements UserInput {\n\n    Checker checker;\n    \n    public\
    \ CellGetter(Checker checker){\n        this.checker = checker;\n    }\n    \n\
    \    @Override\n    public char[] getUserInput() {\n        \n        Scanner\
    \ in = new Scanner(System.in);\n        System.out.print(\"\\nEnter the cells:\
    \ \");\n        String cellInput = in.nextLine();\n        \n        char[] output\
    \ = cellInput.toUpperCase().toCharArray();\n        \n        if(checker.cells.validate(output)){\n\
    \            System.out.println(\"\\nInvalid input. Try again!\");\n         \
    \   return getUserInput();\n        }            \n        \n        return output;\n\
    \        \n    }\n}\n"
  learner_created: true
- name: src/tictactoe/helpers/AI.java
  visible: true
  text: "package tictactoe.helpers;\n\nimport tictactoe.interfaces_.Difficulty;\n\
    import tictactoe.mainclasses.Board;\nimport tictactoe.validation.classes.PlayLastCellToWin;\n\
    \nimport java.util.Random;\n\npublic class AI implements Difficulty{\n    \n \
    \   PlayLastCellToWin playLastCellToWin;\n    Board board;\n    \n    public AI(PlayLastCellToWin\
    \ playLastCellToWin, Board board){\n        this.playLastCellToWin = playLastCellToWin;\n\
    \        this.board = board;\n    }\n\n    @Override\n    public void execute(Random\
    \ random, char symbol) {\n\n        System.out.println(\"Making move level \\\"\
    easy\\\"\");\n        playRandom(random, symbol);\n\n    }\n\n    public void\
    \ execute(Random random, char homeSymbol, char awaySymbol){\n\n        System.out.println(\"\
    Making move level \\\"medium\\\"\");\n        \n        if(!playLastCell(homeSymbol)\
    \ && !blockOpponent(homeSymbol, awaySymbol)){\n            \n            playRandom(random,\
    \ homeSymbol);\n            \n        }\n        \n    }\n\n    private void playRandom(Random\
    \ random, char symbol){\n\n        int[] coords = computerMove(random, board);\n\
    \        board.getBoard()[coords[0]][coords[1]] = symbol;\n        \n    }\n \
    \   \n    private boolean playLastCell(char homeSymbol){\n        \n        return\
    \ playLastCellToWin.checkRow(homeSymbol, homeSymbol)\n                || playLastCellToWin.checkColumn(homeSymbol,\
    \ homeSymbol)\n                || playLastCellToWin.checkDiagonal(homeSymbol,\
    \ homeSymbol);\n        \n    }\n    \n    private boolean blockOpponent(char\
    \ homeSymbol, char awaySymbol){\n\n        return playLastCellToWin.checkRow(awaySymbol,\
    \ homeSymbol)\n                || playLastCellToWin.checkColumn(awaySymbol, homeSymbol)\n\
    \                || playLastCellToWin.checkDiagonal(awaySymbol, homeSymbol);\n\
    \        \n    }\n            \n    private static int[] computerMove(Random randomGenerator,\
    \ Board board){\n\n       \n        int randomRow = randomGenerator.nextInt(3);\n\
    \        int randomColumn = randomGenerator.nextInt(3);\n\n        while(board.getBoard()[randomRow][randomColumn]\
    \ != ' '){\n\n            randomRow = randomGenerator.nextInt(3);\n          \
    \  randomColumn = randomGenerator.nextInt(3);\n\n        }\n\n        return new\
    \ int[]{randomRow, randomColumn};\n\n    }\n\n\n   \n}\n"
  learner_created: true
- name: src/tictactoe/helpers/PositionGetter.java
  visible: true
  text: "package tictactoe.helpers;\n\nimport tictactoe.interfaces_.UserInput;\nimport\
    \ tictactoe.validation.classes.Checker;\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\
    \npublic class PositionGetter implements UserInput {\n    \n    Checker checker;\n\
    \    public PositionGetter(Checker checker){\n        this.checker = checker;\n\
    \    }\n    \n    @Override\n    public char[] getUserInput() {\n\n        Scanner\
    \ in = new Scanner(System.in);\n        System.out.print(\"Enter the coordinates:\
    \ \");\n        \n        String coordinatesInput = in.nextLine();\n        String[]\
    \ coordinates = coordinatesInput.split(\" \");\n        \n        char[] output\
    \ = String.join(\"\", coordinates).toCharArray();\n\n\n        if(!checker.numbers.validate(output)){\n\
    \n            System.out.println(\"You should enter numbers!\");\n           \
    \ return getUserInput();\n\n        }else if(!checker.boundary.validate(output)){\n\
    \            \n            System.out.println(\"Coordinates should be from 1 to\
    \ 3!\");\n            System.out.println(Arrays.toString(output));\n         \
    \   return getUserInput();\n            \n        }\n      \n        return output;\n\
    \        \n    }\n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 01 Jun 2021 14:32:52 UTC
record: 5
